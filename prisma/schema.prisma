// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// enum Role {
//     ADMIN,
//     USER
// }

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    role   String  @default("USER")
    apiKey String?

    accounts Account[]
    sessions Session[]
    folders  Folder[]
    comments Comment[]
    likes    Like[]
    snippets Snippet[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Like {
    id Int @id @default(autoincrement())

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    snippet   Snippet @relation(fields: [snippetId], references: [id])
    snippetId String  @unique

    @@index(fields: [id, userId, snippetId])
}

model Comment {
    id      Int    @id @default(autoincrement())
    comment String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    snippet   Snippet @relation(fields: [snippetId], references: [id])
    snippetId String

    children Comment[] @relation("Comment_Children")
    parent   Comment?  @relation("Comment_Children", fields: [parentId], references: [id])
    parentId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index(fields: [id, snippetId])
}

model Snippet {
    id    String @id @default(cuid())
    title String

    content  String
    isPublic Boolean
    syntax   String?
    password String?

    user     User    @relation(fields: [userId], references: [id])
    userId   String
    folder   Folder? @relation(fields: [folderId], references: [id])
    folderId String?

    likes    Like[]
    comments Comment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index(fields: [title(sort: Desc), id, createdAt(sort: Desc), folderId(sort: Desc), isPublic(sort: Desc), password, syntax(order: Desc)])
}

model Folder {
    id String @id @default(cuid())

    name String

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    snippets Snippet[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index(fields: [name(sort: Desc), id])
}
